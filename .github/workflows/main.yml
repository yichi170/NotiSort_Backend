name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  type: ${{ secrets.TYPE }}
  project_id: ${{ secrets.PROJECT_ID }}
  private_key_id: ${{ secrets.PRIVATE_KEY_ID }}
  private_key: ${{ secrets.PRIVATE_KEY }}
  client_email: ${{ secrets.CLIENT_EMAIL }}
  client_id: ${{ secrets.CLIENT_ID }}
  auth_uri: ${{ secrets.AUTH_URI }}
  token_uri: ${{ secrets.TOKEN_URI }}
  auth_provider_x509_cert_url: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
  client_x509_cert_url: ${{ secrets.CLIENT_X509_CERT_URL }}  

jobs:

  Test_model:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Install Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Pytest
      run: |
        cd model
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests "fastapi[all]"
        pytest -v

  Test_graphql:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Install Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Pytest
      run: |
        cd graphql
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        pytest -v

  Build_docker:
    needs: [Test_model, Test_graphql]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Run docker-compose
      run: |
        docker-compose up --build -d
        
  Deploy:
    needs: Build_docker
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - name: Deploy project to Google Compute Engine
      env:
        type: ${{ secrets.TYPE }}
        project_id: ${{ secrets.PROJECT_ID }}
        private_key_id: ${{ secrets.PRIVATE_KEY_ID }}
        private_key: ${{ secrets.PRIVATE_KEY }}
        client_email: ${{ secrets.CLIENT_EMAIL }}
        client_id: ${{ secrets.CLIENT_ID }}
        auth_uri: ${{ secrets.AUTH_URI }}
        token_uri: ${{ secrets.TOKEN_URI }}
        auth_provider_x509_cert_url: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
        client_x509_cert_url: ${{ secrets.CLIENT_X509_CERT_URL }}  
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSHKEY }}
        envs: type,project_id,private_key_id,private_key,client_email,client_id,auth_uri,token_uri,auth_provider_x509_cert_url,client_x509_cert_url
        script: |
          export type=$type
          export project_id=$project_id
          export private_key_id=$private_key_id
          export private_key=$private_key
          export client_email=$client_email
          export client_id=$client_id
          export auth_uri=$auth_uri
          export token_uri=$token_uri
          export auth_provider_x509_cert_url=$auth_provider_x509_cert_url
          export client_x509_cert_url=$client_x509_cert_url
          cd NotiSort_Backend
          git pull https://github.com/yichi170/NotiSort_Backend.git
          docker-compose up --build -d